package org.planit.network.physical;

import java.util.logging.Logger;

import org.planit.graph.DirectedGraphBuilderImpl;
import org.planit.graph.EdgeSegmentsImpl;
import org.planit.graph.EdgesImpl;
import org.planit.graph.VerticesImpl;
import org.planit.utils.exceptions.PlanItException;
import org.planit.utils.graph.DirectedEdge;
import org.planit.utils.graph.EdgeSegments;
import org.planit.utils.graph.Edges;
import org.planit.utils.graph.Vertex;
import org.planit.utils.graph.Vertices;
import org.planit.utils.id.IdGenerator;
import org.planit.utils.id.IdGroupingToken;
import org.planit.utils.network.physical.Link;
import org.planit.utils.network.physical.LinkSegment;
import org.planit.utils.network.physical.Node;

/**
 * Create network entities for a physical network simulation model
 * 
 * @author markr
 *
 */
public class PhysicalNetworkBuilderImpl implements PhysicalNetworkBuilder<Node, Link, LinkSegment> {

  @SuppressWarnings("unused")
  private static final Logger LOGGER = Logger.getLogger(PhysicalNetworkBuilderImpl.class.getCanonicalName());

  /** hold an implementation of directed graph builder to use its overlapping functionality */
  protected DirectedGraphBuilderImpl directedGraphBuilderImpl;

  // Public methods

  public PhysicalNetworkBuilderImpl(IdGroupingToken groupId) {
    this.directedGraphBuilderImpl = new DirectedGraphBuilderImpl(groupId);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Node createVertex() {
    return new NodeImpl(getIdGroupingToken());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Link createEdge(Vertex nodeA, Vertex nodeB, final double length) throws PlanItException {
    if (nodeA instanceof Node && nodeB instanceof Node) {
      return new LinkImpl(getIdGroupingToken(), (Node) nodeA, (Node) nodeB, length);
    } else {
      throw new PlanItException("unable to create link, vertices should be of type Node");
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public LinkSegment createEdgeSegment(DirectedEdge parentLink, boolean directionAB) throws PlanItException {
    return new LinkSegmentImpl(getIdGroupingToken(), (Link) parentLink, directionAB);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setIdGroupingToken(IdGroupingToken groupToken) {
    directedGraphBuilderImpl.setIdGroupingToken(groupToken);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IdGroupingToken getIdGroupingToken() {
    return directedGraphBuilderImpl.getIdGroupingToken();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void recreateIds(EdgeSegments<? extends LinkSegment> linkSegments) {
    directedGraphBuilderImpl.recreateIds(linkSegments);

    /* conduct linkIds ourselves since it is a physical network add-on */
    if (linkSegments instanceof EdgeSegmentsImpl<?>) {
      /* remove gaps by simply resetting and recreating all node ids */
      IdGenerator.reset(getIdGroupingToken(), LinkSegment.class);

      for (LinkSegment linkSegment : linkSegments) {
        if (linkSegment instanceof LinkSegmentImpl) {
          ((LinkSegmentImpl) linkSegment).setLinkSegmentId(LinkSegmentImpl.generateLinkSegmentId(getIdGroupingToken()));
        } else {
          LOGGER.severe(String.format("attempting to reset id on link segment (%s) that is not compatible with the node implementation generated by this builder, ignored",
              linkSegment.getClass().getCanonicalName()));
        }
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void recreateIds(Edges<? extends Link> links) {
    /* delegate for edge ids */
    directedGraphBuilderImpl.recreateIds(links);

    /* conduct linkIds ourselves since it is a physical network add-on */
    if (links instanceof EdgesImpl<?, ?>) {
      /* remove gaps by simply resetting and recreating all link ids */
      IdGenerator.reset(getIdGroupingToken(), Link.class);

      for (Link link : links) {
        if (link instanceof LinkImpl) {
          ((LinkImpl) link).setLinkId(LinkImpl.generateLinkId(getIdGroupingToken()));
        } else {
          LOGGER.severe(String.format("attempting to reset linkId on link (%s) that is not compatible with the link implementation generated by this builder, ignored",
              link.getClass().getCanonicalName()));
        }
      }
    } else {
      LOGGER.severe("expected the Edges implementation to be compatible with graph builder, this is not the case: unable to correctly remove subnetwork and update ids");
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void recreateIds(Vertices<? extends Node> nodes) {
    /* delegate for vertex ids */
    directedGraphBuilderImpl.recreateIds(nodes);

    /* conduct linkIds ourselves since it is a physical network add-on */
    if (nodes instanceof VerticesImpl<?>) {
      /* remove gaps by simply resetting and recreating all node ids */
      IdGenerator.reset(getIdGroupingToken(), Node.class);

      for (Node node : nodes) {
        if (node instanceof NodeImpl) {
          ((NodeImpl) node).setNodeId(NodeImpl.generateNodeId(getIdGroupingToken()));
        } else {
          LOGGER.severe(String.format("attempting to reset id on node (%s) that is not compatible with the node implementation generated by this builder, ignored",
              node.getClass().getCanonicalName()));
        }
      }
    } else {
      LOGGER.severe("expected the Vertices implementation to be compatible with graph builder, this is not the case: unable to correctly remove subnetwork and update ids");
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Link createUniqueCopyOf(Link linkToCopy) {
    if (linkToCopy instanceof LinkImpl) {
      LinkImpl copy = (LinkImpl) directedGraphBuilderImpl.createUniqueCopyOf(linkToCopy);

      /* make unique copy by updating link id */
      copy.setLinkId(LinkImpl.generateLinkId(getIdGroupingToken()));
      return copy;
    }
    LOGGER.severe("passed in link is not an instance created by this builder, incompatible for creating a copy");
    return null;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public LinkSegment createUniqueCopyOf(LinkSegment linkSegmentToCopy, DirectedEdge parentEdge) {
    if (linkSegmentToCopy instanceof LinkSegmentImpl) {
      LinkSegmentImpl copy = (LinkSegmentImpl) directedGraphBuilderImpl.createUniqueCopyOf(linkSegmentToCopy, parentEdge);

      /* make unique copy by updating link segment id */
      copy.setLinkSegmentId(LinkSegmentImpl.generateLinkSegmentId(getIdGroupingToken()));
      return copy;
    }
    LOGGER.severe("passed in link segment is not an instance created by this builder, incompatible for creating a copy");
    return null;
  }

}
