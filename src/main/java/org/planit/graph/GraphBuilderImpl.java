package org.planit.graph;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;

import org.planit.utils.exceptions.PlanItException;
import org.planit.utils.graph.Edge;
import org.planit.utils.graph.Edges;
import org.planit.utils.graph.Graph;
import org.planit.utils.graph.GraphBuilder;
import org.planit.utils.graph.Vertex;
import org.planit.utils.graph.Vertices;
import org.planit.utils.id.IdGenerator;
import org.planit.utils.id.IdGroupingToken;

/**
 * Create network entities for a physical network simulation model
 * 
 * @author markr
 *
 */
public class GraphBuilderImpl implements GraphBuilder<Vertex, Edge> {

  private static final Logger LOGGER = Logger.getLogger(GraphBuilderImpl.class.getCanonicalName());

  /**
   * Contiguous id generation within this group id token for all instances created with factory methods in this class
   */
  protected IdGroupingToken groupId;

  /**
   * Remove id gaps from available edges by renumbering all of them and updating the registration
   * 
   * @param edges to recreated ids for
   */
  protected void removeIdGaps(Edges<? extends Vertex, ? extends Edge> edges) {
    /* remove gaps by simply resetting and recreating all edge ids */
    IdGenerator.reset(getIdGroupingToken(), Edge.class);

    for (Edge edge : edges) {
      if (edge instanceof EdgeImpl) {
        ((EdgeImpl) edge).setId(EdgeImpl.generateEdgeId(getIdGroupingToken()));
      } else {
        LOGGER.severe(String.format("attempting to reset id on edge (%s) that is not compatible with the edge implementation generated by this builder, ignored",
            edge.getClass().getCanonicalName()));
      }
    }
  }

  /**
   * Remove id gaps from available verrtices by renumbering all of them and updating the registration
   * 
   * @param vertices to recreated ids for
   */
  protected void removeIdGaps(Vertices<? extends Vertex> vertices) {
    /* remove gaps by simply resetting and recreating all vertex ids */
    IdGenerator.reset(getIdGroupingToken(), Vertex.class);

    for (Vertex vertex : vertices) {
      if (vertex instanceof VertexImpl) {
        ((VertexImpl) vertex).setId(VertexImpl.generateVertexId(getIdGroupingToken()));
      } else {
        LOGGER.severe(String.format("attempting to reset id on vertex (%s) that is not compatible with the edge implementation generated by this builder, ignored",
            vertex.getClass().getCanonicalName()));
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Vertex createVertex() {
    return new DirectedVertexImpl(groupId);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Edge createEdge(Vertex vertexA, Vertex vertexB, final double length) throws PlanItException {
    return new EdgeImpl(groupId, vertexA, vertexB, length);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setIdGroupingToken(IdGroupingToken groupId) {
    this.groupId = groupId;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IdGroupingToken getIdGroupingToken() {
    return this.groupId;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void removeSubNetwork(Graph<Vertex, Edge> graph, Set<Vertex> subNetworkToRemove) {

    /* remove the subnetwork from the actual network */
    for (Vertex vertex : subNetworkToRemove) {
      Set<Edge> vertexEdges = new HashSet<Edge>(vertex.getEdges());

      /* remove vertex' edges from graph */
      vertexEdges.forEach(edge -> graph.getEdges().remove(edge));
      /* remove vertex from graph */
      graph.getVertices().remove(vertex);

      /* remove edges from vertex */
      vertexEdges.forEach(edge -> vertex.removeEdge(edge));

      /* remove vertex from edge */
      vertexEdges.forEach(edge -> edge.removeVertex(vertex));
    }

    /* ensure no id gaps remain after the removal of internal entities */
    if (graph.getEdges() instanceof EdgesImpl<?, ?>) {
      removeIdGaps((EdgesImpl<?, ?>) graph.getEdges());
    } else {
      LOGGER.severe("expected the Edges implementation to be compatible with graph builder, this is not the case: unable to correctly remove subnetwork and update ids");
    }

    if (graph.getVertices() instanceof VerticesImpl<?>) {
      removeIdGaps((VerticesImpl<?>) graph.getVertices());
    } else {
      LOGGER.severe("expected the Vertices implementation to be compatible with graph builder, this is not the case: unable to correctly remove subnetwork and update ids");
    }
  }

}
